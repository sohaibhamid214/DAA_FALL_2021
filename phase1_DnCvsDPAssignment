/ Java program to find number of cells a
// queen can move with obstacles on the
// chessborad
import java.io.*;
 
class GFG {
 
    // Return the number of position a Queen
    // can move.
    static int numberofPosition(int n, int k, int x,
                 int y, int obstPosx[], int obstPosy[])
    {
         
        // d11, d12, d21, d22 are for diagonal distances.
        // r1, r2 are for vertical distance.
        // c1, c2 are for horizontal distance.
        int d11, d12, d21, d22, r1, r2, c1, c2;
     
        // Initialise the distance to end of the board.
        d11 = Math.min( x-1, y-1 );
        d12 = Math.min( n-x, n-y );
        d21 = Math.min( n-x, y-1 );
        d22 = Math.min( x-1, n-y );
     
        r1 = y-1;
        r2 = n-y;
        c1 = x-1;
        c2 = n-x;
     
        // For each obstacle find the minimum distance.
        // If obstacle is present in any direction,
        // distance will be updated.
        for (int i = 0; i < k; i++)
        {
            if ( x > obstPosx[i] && y > obstPosy[i] &&
                    x-obstPosx[i] == y-obstPosy[i] )
                d11 = Math.min(d11, x-obstPosx[i]-1);
     
            if ( obstPosx[i] > x && obstPosy[i] > y &&
                    obstPosx[i]-x == obstPosy[i]-y )
                d12 = Math.min( d12, obstPosx[i]-x-1);
     
            if ( obstPosx[i] > x && y > obstPosy[i] &&
                    obstPosx[i]-x == y-obstPosy[i] )
                d21 = Math.min(d21, obstPosx[i]-x-1);
     
            if ( x > obstPosx[i] && obstPosy[i] > y &&
                        x-obstPosx[i] == obstPosy[i]-y )
                d22 = Math.min(d22, x-obstPosx[i]-1);
     
            if ( x == obstPosx[i] && obstPosy[i] < y )
                r1 = Math.min(r1, y-obstPosy[i]-1);
     
            if ( x == obstPosx[i] && obstPosy[i] > y )
                r2 = Math.min(r2, obstPosy[i]-y-1);
     
            if ( y == obstPosy[i] && obstPosx[i] < x )
                c1 = Math.min(c1, x-obstPosx[i]-1);
     
            if ( y == obstPosy[i] && obstPosx[i] > x )
                c2 = Math.min(c2, obstPosx[i]-x-1);
        }
     
        return d11 + d12 + d21 + d22 + r1 + r2 + c1 + c2;
    }
     
    // Driver code
    public static void main (String[] args) {
    int n = 8; // Chessboard size
    int k = 1; // number of obstacles
    int Qposx = 4; // Queen x position
    int Qposy = 4; // Queen y position
    int obstPosx[] = { 3 }; // x position of obstacles
    int obstPosy[] = { 5 }; // y position of obstacles
 
    System.out.println(numberofPosition(n, k, Qposx,
                          Qposy, obstPosx, obstPosy));
    }
}
 -----------------------------------------
 [2:54 pm, 21/12/2021] Ali Naeem Kiet: <!DOCTYPE html>
<html>
<head>
	<title>N-Queen Problem</title>
	<meta charset="utf-8">
	<script type="text/javascript" src="nQueen.js"></script>
		<!-- Load plotly.js into the DOM -->
	<script src='https://cdn.plot.ly/plotly-latest.min.js'></script>
</head>
<body>
	<h1>N-Queen Problem</h1>
	<h2>63742 - Saqib Ullah</h2><!--This is the group leader-->
	<h3>63744 - Adnan Siddiqui</h3><!--This is the 2nd Member of the group-->
	<h4><a href="https://daa2020.000webhostapp.com/nQueen.html" target="blank">GitHub</a></h4><!--Replace about:blank with your GitHub repository folder for assignment 1. -->
	<p> 
		<button id="btnRun" onclick="runEmAll()">Run</button>
	</p>
	<div id='myDiv'><!-- Plotly chart will be drawn inside this DIV --></div>
	<textarea id="ta_sol1" cols="50" rows="30"></textarea>&nbsp
	<textarea id="ta_sol2" cols="50" rows="30"></textarea>&nbsp
	<textarea id="ta_sol3" cols="50" rows="30"></textarea>
	
	
</body>
</html>
[2:54 pm, 21/12/2021] Ali Naeem Kiet: function runEmAll(){
	console.log("Running All Solutions")
	taSol1.value = ""; 	taSol2.value = ""; 	taSol3.value = "";
	var start;
	var end;
	var n=4;
	var xval = [];
	var ysal1 = [];
	var ysal2 = [];
	var ysal3 = [];
	for (var k = 4; k <= 16; k++) {
		xval.push(k);
		//Runs each solution and measures performance in microseconds
		console.log("In Forloop: Line 18, k = "+k+"\n");
		start = performance.now();
		sol1(n);
		end = performance.now();
		taSol1.value+= ""+n+", "+(end-start)*1000+"\n";
		ysal1.push((end-start)*1000);
		
		start = performance.now();
		sol2(n);
		end = performance.now();
		taSol2.value+= ""+n+", "+(end-start)*1000+"\n";
		ysal2.push((end-start)*1000);
		
		start = performance.now();
		sol3(n);
		end = performance.now();
		taSol3.value+= ""+n+", "+(end-start)*1000+"\n";
		n = n * 2;
		}//end for
		
		console.log(xval);


var trace1 = {
  x: xval,
  y: ysal1,
  type: 'scatter',
  name : 'brute-force'
};

var trace2 = {
  x: xval,
  y: ysal2,
  type: 'scatter',
  name : 'back-tracking'
};


var layout = {
  title:'nQueen Problem Timing Analysis'
};

var data = [trace1, trace2];
Plotly.newPlot('myDiv', data,layout);
}//end runEmAll

function sol1(n){
	//Implement your brute-force solution here


	//console.log(([(- 1)] * 8));
	//new NQueens(8);

	//Mention reference where you got the solution
	//Ref: http://
	//Ref: If you found any paper
}//end sol1

function sol2(n){
	//Implement your recursive back-tracking solution here

	//console.log(rb_queenPuzzle(8,8));

	//Mention reference where you got the solution
	//Ref: http://
	//Ref: If you found any paper
}//end sol2

function sol3(n){
	//Implement your dynammic programming solution here

	//--This is garbage code: Remove this--//
	for (var i = 1; i <= n; i++) {
		for(var k=0;k<50;k++);
	}//end for j
	//--End of Garbage Code--//

	//Mention reference where you got the solution
	//Ref: http://
